Source:
https://youtu.be/rki0eVGAVTQ?si=RE7t2-i9CB5z3MHF


Kalau mau run aplikasi (serius): run setiap image docker
- Bikin dulu id dan pass test user di Keycloak
- Jalanin Junit tewsting pada UmkmDataLoaderTest
=============================================================================
Kritik UMKM: Aplikasi Ulasan Kuliner UMKM

1. Project requirements and goals
2. Domain objects and their relationships
3. User interface design and flows
4. System architecture and components
5. REST API design and endpoints

Project Summary
- Discover local restaurants
- Read authentic reviews from other diners
- Share their own dining experiences through detailed reviews and ratings

The platform will help users make informed decisions about where to eat by providing comprehensive restaurant


Technical Considerations
From the requirements, we can identify several technical aspects we'll need to implement:
- Geospatial functionality for restaurant location
- Image upload and display
- User authentication
- Review management system
- Sorting and filtering capabilities
- Business logic for review submission and editing

Project Focus
This implementation will particularly focus on search functionality through Elasticsearch integration, including:
- Fuzzy search capabilities
- Geospatial search techniques

Summary
- Platform enables restaurant discovery and reviews
- Implements core features: search, auth (Keycloak), and image handling
- Focuses on advanced search functionality
- Includes geospatial capabilities
- Provides comprehensive review management

Keycloak:
Keycloak adalah solusi open-source untuk manajemen identitas dan akses yang menyediakan fitur autentikasi dan otorisasi (Login Autentikasi dan Authorization). Berikut adalah poin-poin penting yang harus Anda pahami untuk menggunakan Keycloak secara efektif:

a. Realm (Security configuration logic)
Realm merupakan batasan keamanan logis dalam Keycloak. Setiap realm memiliki koleksi pengguna, peran, dan klien yang terpisah. Dalam implementasi, Anda bisa membuat realm terpisah untuk lingkungan development, testing, dan production.

b. Client
Klien adalah aplikasi (misalnya, aplikasi Spring Boot Anda) yang mengandalkan Keycloak untuk autentikasi dan otorisasi. Anda perlu mendaftarkan aplikasi Anda sebagai client di Keycloak dan mengkonfigurasikan redirect URL, protokol (biasanya OpenID Connect), dan pengaturan lainnya.

c. Roles & Groups:
Peran (roles) digunakan untuk mendefinisikan level akses. Anda bisa menetapkan peran langsung ke pengguna atau melalui grup. Ini berguna untuk mengatur hak akses dalam aplikasi Anda secara granular.

d. User Federation & Identity Brokering:
Keycloak mendukung integrasi dengan penyedia identitas eksternal (seperti LDAP atau penyedia sosial seperti Google) untuk memudahkan proses autentikasi. Ini memungkinkan integrasi tanpa harus membuat sistem manajemen pengguna dari nol.



Integrasi Keycloak dengan Spring Boot:
a. Adapter dan Spring Security:
Keycloak menyediakan adapter khusus untuk Spring Boot yang memudahkan integrasi. Anda dapat menggunakan library seperti spring-boot-starter-keycloak atau mengonfigurasi Spring Security untuk berkomunikasi dengan server Keycloak.

b. Konfigurasi:
- application.properties/yaml: Anda akan memasukkan konfigurasi seperti URL server Keycloak, realm, dan client-id.
- Security Configuration: Pada kelas konfigurasi Spring Security, Anda dapat mengatur aturan keamanan (misalnya, endpoint mana yang memerlukan autentikasi) dan mendefinisikan bagaimana token dari Keycloak divalidasi.

c. Flow Autentikasi:
Ketika pengguna mengakses aplikasi, mereka diarahkan ke halaman login Keycloak. Setelah berhasil login, Keycloak mengeluarkan token (ID token dan access token) yang kemudian dipakai oleh aplikasi Anda untuk mengotorisasi akses dan menentukan peran pengguna.


Manajemen dan Deployment
a. Admin Console:
Keycloak menyediakan antarmuka admin web yang intuitif untuk mengelola realm, klien, pengguna, dan peran. Anda bisa melakukan manajemen pengguna, reset password, dan memonitor log aktivitas.


Elasticsearch
Elasticsearch adalah mesin pencari dan analitik terdistribusi yang banyak digunakan untuk pencarian full-text, analisis log, dan berbagai aplikasi analitik data.

1. Arsitektur dan Konsep Utama
a. Cluster dan Node:
Elasticsearch berjalan dalam sebuah cluster yang terdiri dari beberapa node (server). Cluster memberikan redundansi dan skalabilitas. Node dapat berperan sebagai master, data node, atau client node, tergantung pada konfigurasi dan kebutuhan beban kerja.

b. Index, Document, dan Field:
- Index: Sebuah koleksi dokumen yang memiliki karakteristik serupa, mirip dengan database dalam sistem RDBMS.
- Document: Unit dasar data dalam Elasticsearch, disimpan dalam format JSON.
- Field: Setiap dokumen terdiri dari field yang menyimpan informasi spesifik. Field dapat diindeks agar pencarian menjadi cepat dan efisien.

c. Shards dan Replicas:
Untuk meningkatkan performa dan ketersediaan, index dipecah menjadi beberapa shard. Masing-masing shard dapat memiliki replika untuk memastikan data tetap tersedia jika terjadi kegagalan node.

2. Penggunaan dalam Project Spring Boot
a. Integrasi dengan Spring Data Elasticsearch:
Spring Boot menyediakan modul Spring Data Elasticsearch yang menyederhanakan operasi CRUD dan query. Anda cukup mendefinisikan repository interface untuk melakukan indexing, pencarian, dan agregasi data.

b. Query DSL:
Elasticsearch menggunakan JSON-based Domain Specific Language (DSL) untuk pencarian. Anda bisa membangun query yang kompleks, misalnya pencarian fuzzy, match, term, dan boolean query untuk memfilter dan mengurutkan hasil.

c. Indexing Data:
Untuk mengindeks data, Anda perlu:
- Membuat mapping untuk mendefinisikan struktur dokumen (opsional, karena Elasticsearch bersifat schema-less).
- Menggunakan API indexing (misalnya, melalui repository Spring Data) untuk memasukkan dokumen ke dalam index.

d. Analitik dan Agregasi:
Elasticsearch juga mendukung agregasi data yang memungkinkan analisis statistik seperti penghitungan, rata-rata, dan distribusi data secara real-time.


3. Best Practices dan Manajemen
a. Monitoring dan Scaling:
Karena Elasticsearch sangat bergantung pada konfigurasi cluster, penting untuk memonitor kesehatan cluster, penggunaan resource, dan latensi pencarian. Tools seperti Kibana atau Elastic Stack (ELK) sering digunakan untuk tujuan ini.

b. Backup dan Recovery:
Pastikan untuk mengatur snapshot dan backup secara berkala untuk menghindari kehilangan data

c. Penggunaan Query yang Efisien:
Rancang query dengan efisien untuk menghindari beban berlebih pada cluster. Gunakan filter dan paginasi saat mengambil data dalam jumlah besar.



Core Domain Objects
1. User
The User object represents registered users of the platform. We're keeping this minimal since authentication will be
- Basic identification (ID, name, email)
- Can create restaurants (as an owner)
- Can write reviews for restaurants

2. Restaurant
The Restaurant entity is central to our platform:
- Core details (name, cuisine type, contact information)
- Average rating (calculated from reviews)
- Contains complex nested objects: 
	- Address (including geolocation)
	- Operating hours
	- Photos
	- Reviews

3. Review
- Written content
- Numerical rating (1-5 stars)
- Metadata (author, posting date, last edit date)
- Can include multiple photos
- Editable within 48 hours of posting

4. Address
- Structured representation of location
- Contains street number, street name, unit, city, state, postal code
	- Includes geolocation data (latitude/longitude) for mapping

5. Operating Hours
- Structured as daily time ranges
- Separate open/close times for each day of the week
- Allows for different schedules per day

6. Photo
- URL to stored image
- Additional metadata (caption, upload date)
- Can be associated with restaurants or reviews


Domain Relationships

1. User-Restaurant:
- Users can create restaurants (as owners)
- One user can create multiple restaurants
- Each restaurant has one owner

2. User-Review:
- Users write reviews
- One user can write multiple reviews
- Each review has one author

3. Restaurant-Review:
- Restaurants contain reviews
- One restaurant can have multiple reviews
- Each review belongs to one restaurant

4. Complex Object Relationships:
- Restaurant contains one Address
- Address contains one GeoLocation
- Restaurant contains one OperatingHours
- OperatingHours contains seven TimeRange objects (one per day)
- Reviews can contain multiple Photos


Elasticsearch Considerations
- Restaurant will be a top-level document
- Other objects (Address, Reviews, Photos, etc.) will be nested within these documents
- This structure optimizes for search operations while maintaining relationship integrity


Dependencies:
1. OAuth2 Resource Server Security
Spring Boot integration for Spring Security's OAuth2 resource server features.

Dependensi tersebut memberikan ruang untuk layanan autentikasi open source seperti Keycloak

[34:44]


[45:10]
Kibana setup di localhost;5601 or local server

1. Go to Daftar Menu bagian Management untuk opsi 'Stack Management'
2. Lalu pada menu kiri pilih 'Index Management'
	- disini kita menemukan elastic search indexes (list tabel database)
	- nanti java akan bikin index secara otomatis, sama seperti @Table
	- 

3. Nanti pada Kibana setup Elasticsearch akan memiliki dua Index:
	- User
	- Restaurant

tambahkan konfigurasi ke properties untuk menandkaan uris dari elastic search


[50:10] Set up and Running KeyCloak
1. Nanti kita bakal add Realms (semacam logic untuk spring security), caranya klik 'Create realm' pada drop down 'master' dan kasih nama 'kritik-umkm', turn on field 'Enabled'

Jadi Realms seperti tenant yanng memiliki konfiguraasi spesifik untuk aplikasi kritik umkm.

tambahkan konfigurasi properties untuk jwt uris menggunakan keycloak dengan NAMA realms sebelumnya



Set Up Mapstruct
For handling object mapping diantara layer-layer dari Spring lifecycle dan pastikan berjalan dengan Lombok.

Di pom.xml pastiin versi Lombok dan Mapstruct bekerja dengan benar


[54:03]

Elastic: http://localhost:5601/
ElasticSearch: http://localhost:9200/
Kibana: http://localhost:5601/

Keycloak: http://localhost:/




Module domain;

1. Bikin elasticsearch entity for User
2. Bikin elasticsearch entity for Alamat
3. Bikin elasticsearch entity for Jam Operasi
	- dan entity Rentang Waktu
4. Bikin elasticsearch entity for Gambar
5. Bikin elasticsearch entity for Kritik

Disini kita menggunakan anotasi @Field instead of @Column, karena kita menggunakna database NoSQL yaitu Elasticsearch.

Selain itu kita bisa pilih suatu variabel akan dilakukan searching secara full, parcial, nested, Date. FUll akan search data secara rinci dan langsung.

Sedangkan partial hanya sebagian kata terlebih dahulu.

Lalu nested artinya tipe data Objek dari variabel tersebut dimiliki oleh class sekarang dan berasal dari class sebelumnya. Dengan kata lain "Nested" adalah cara untuk menghubungkan relasi antar dua kelas. Hampir sama kayak @ManyToOne, dan lain-lain.

Sedangkan jika Date artinya menandakan itu adalah waktu dan perlu tambah parameter format bagaimana waktu ditampilkan, karena LocalDateTime terdiri dari objek Date dan Time

Terakhir yaitu Entitas untuk Umkm (atau Restaurant), disini anotasinya selain @Data juga menandakan bahwa entitas tersebut merupakan sebuah @Document pada Elasticsearch (seperti tabel di rdbms).

Kenapa cuma entity Umkm aja yang ada anotasi @Document? Karena class ini memiliki relasi / Nested terhadap berbagai entitas lainnya.

Repository on Umkm inherence from Elasticsearch



Authentication
- menggunakan Keycloak sebagai indentity provider

1. Create user in Keycloak
2. Konfigurasi OAauth2 resource server in spring boot app. Sehingga user dari keycloak yang terautentikasi bisa berinteraksi dengan aplikasi




1. Create User (Authentication)
- make sure sekarang lagi di 'kritik-umkm' Keycloak realms
- Masuk ke halaman Users > Add user > Isi username, email, first dan last name (bebas yang penting ada testnya, untuk nandain) > Create
- Pada detail user, pilih navbar 'Credential > Set Password > 'testpassword' > temporary = 'off'.
- 


2. Create Security Config (Authentication)
- protect endpoints
- validate access tokens

Look carefully on `package com.roniantonius.kritikumkm.config.SecurityConfig`
- app require all endpoint to be authenticated
- setup stateless session management for Rest API
- enabled JWT token validation with keycloak




Gambar Upload:
- store and retrieves Gambar

1. file storage design di Spring
	- design interface for storing and retriving files
	- custom error handling exception for file storage
	- implement core file storage operations
	- build 'Services' for upload and retrive Gambar
	- create DTO dan Mappers

Gambar Upload feature:
- saving files to Server disk

- Create services for Storage, main functionality to store and load a files/resource.

*note:
Multipartfile adalaah format dari Spring boot ketika kita upload file.



Storing Files:
[1:40:52]

- Create implement of Storage Service
	- Where file disimpan?
	- dan disimpan dengan cara Copy melalui InputStream


- Retrieving Files



Uploading and Retrieving Gambars;
- Create a specific Service untuk melakukan upload dan mengambil gambar.

Gambar Dto dan Mapper


Gambar Upload Endpoint @Postmapping



Next Error Handling [2:10:23]


Gambar Retrieval Endpoint
	- Make sure that get Gambar is already permitAll in Security Config
	- receive id of the Gambar
	- Resource that found must be display as gambar in contentType
	- header with CONTENT_DISPOSITION "inline" so that server just display the image instead of download




Endpoint for Umkm Create:
1. umkm service
2. geolocation service
3. domain object and interface
4. core business logic and dto
5. object mapper
6. controller



1. Geolocation to Umkm
Geolocation convert data alamat menjadi data koordinat seperti longlat. dan tentunya perlu domain baru.

Karena lokasi utama pengennya di Jakarta, jadi pada Service yang menerapkan geolocation dengan input objek Alamat kita perlu bikin Bounding box yang mencakup area Jakarta.


2. Create Umkm Service
Karena kita ga bisa pakai entitas Umkm di entities.. KIta bikin domain baru untuk Creaate Update request yang nanti digunakan di presentation/service layer.

- Umkm Service that will use data from UmkmCreateUpdateRequest or as a request to be used as creating a new Umkm entity in persitance.

*request is what user put in their form


3. Create Umkm Dto for UKMM Data for Update Request
Creating Dto for Umkm meaning that we need to implement every Dto to every Object that were using like rentangWaktu, Alamant, JamOperasi, etc into Dto

But first we need to configure the Dto for Umkm Create Update Request

"^([01]?[0-9]|2[0-3]):[0-5][0-9]$"


4. Umkm Mappers [2:47:39]
- Bikin converter dari Dto Request Umkm ke entity Request
- dari objek Umkm ke Umkm Dto
- dan dari GeoPoint ke GeoPoint Dto

5. Create Umkm Controller 
- Create / Post


6. Import Test Data for Umkm Create [3:00:58]






Umkm Search;
User able to find umkm berdasarkan namanya
- repository for custom elastic search queries
- service layer for which queries will be used
- dto and mapper
- rest api controller



1. Umkm search repository
	- user bisa cari umkm berdasarkan tipe konsumsi, rating, dan lokasi
	- menggunakan @Query dari elasticsearch, kita bisa cari Umkm berdasarkan rataRating dan tipeKonsumsi
	- @Query menfcari umkm berdasarkan Geo Location dengan radius 2km menggunakan input latitude dan longitude

2. Umkm Search Service
- using repository method untuk functionality dalam controller
- dto and mapper for umkm search

3. Umkm Search Controller
- accessible for everyone (security config needed)

Testing search functionality on based name and tipe konsumsi dan berdasarkan lokasi (longlat).

Untuk melihat daftar lengkap dari restaurant, kita sebenarnya bisa query langsung di kibana elastic search ya.

Kita pastiiin api dari search berdasarkan lokasi di postman dan jangan lupa isi dari request param.





Module Umkm Retrieve by id:
- digunakan ketika ingin melihat detail dari umkm
- bikin service untuk lookups detail
- bikin rest api endpoint
- test di ui



Modul Umkm update:
- service update functionality
- error handling if umkm doesnt exist
- impl service layer
- controller: api endpoint

1. Functionality mirip seperti createUmkm yaitu menggunakan Dto untuk Create Update Request



Modul Delete Umkm:




Module Create Kritik
- design Kritik create
- exception handling for Kritik yang tidak diperbolehkan (jika user udah pernah nulis review)
- service layer for create Kritik
- Dto dan Mapper
- Controller endpoint

1. Design Kritik Create
Biasanya kita bikin sebuah @Data yang mewakili Request untuk proses Create dan Update atau lebih ke sebuah objek yang menampung data dari Form di frontend.


[4:14:47]

Kritik Create Dto dan Controller

Intinya di Controller ini memanfkaatkan fungsionalitas create Kritik pada service yang memerlukan constructor objek User sebagai author, string id dari umkm, dan data request.

Sehingga pada controller kita memerlukan input dengan objek Jwt (dari Oauth yang digunakan pada keycloak di elastic) dengan anotasi @AuthenticationPrincipal.

Jadi perlu convert dari objek 'Jwt' menjadi objek 'User'.




Module Kritik List:
- list kritik service layer
- api endpoint for listing Kritiks based on umkmId

Daftar Kritik service:
- ambil objek untuk Umkm dan daftar dari Kritik berdasarakan umkmIds
- ambil informasi storting dengan getSort() pada pageable dan simpan pada variabel baru yaitu bertipa Sort.


## Manual paagination karena Kritik itu diambil dari 'dokumen' elastic yaitu Umkm
- Periksa apkah sorting sudah dicustom atau belum
- Jika belum:
	- ammbil item pertama hasil sorting
	- ekstrak property nama untuk diurutkan berdasarkan suatu instance
	- tentukan apakh sorting menjadi asc atau desc
	- bikin objek Comparator dengan tipe Kritik untuk sort berdasrkan spesifik informasi seperti sort review berdasarkan Rating atau waktu terbaru
	- urutkan ulang list Kritik.
- Jika sudah:
	- list dari umkm dengan kategori waktu atau rating using switch case
	- hitung dan validasi mekanisme dari mulai dan akhir.
	- 

- kustomisasi pagination mulai dari pengurutan (asc, desc) melalui Sort.Order

[4:46:56] Module Kritik Retrieve